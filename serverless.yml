service: todos
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  environment:
    TODOS_TABLE_NAME: ${self:service}
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: ${self:custom.TodosTable.arn}

functions:
  create:
    handler: src/create.create
    events:
      - httpApi:
          path: /todos
          method: post
  list:
    handler: src/list.list
    events:
      - httpApi:
          path: /todos
          method: get
  get:
    handler: src/get.get
    events:
      - httpApi:
          path: /todos/{id}
          method: get
  update:
    handler: src/update.update
    events:
      - httpApi:
          path: /todos/{id}
          method: put

resources:
  Resources:
    TodosTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TableName: ${self:provider.environment.TODOS_TABLE_NAME}
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-esbuild
  - serverless-dynamodb
  - serverless-offline

custom:
  TodosTable:
    name: !Ref TodosTable
    arn: !Ref TodosTable.arn
  serverless-dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      noStart: true
    migration:
      dir: offline/migrations
